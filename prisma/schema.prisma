generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  orders    Order[]
  cart      Cart?

  @@map("users")
}

enum UserRole {
  CLIENT
  ADMIN
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  gender      Gender
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  images      ProductImage[]
  sizes       ProductSize[]
  colors      ProductColor[]
  features    ProductFeature[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductSize {
  id        String   @id @default(cuid())
  size      String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_sizes")
}

model ProductColor {
  id        String   @id @default(cuid())
  color     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_colors")
}

model ProductFeature {
  id        String   @id @default(cuid())
  name      String
  value     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_features")
}

enum Gender {
  HOMME
  FEMME
  ENFANT
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  image       String?
  products    Product[]

  @@map("categories")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  total       Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  shippingFirstName String?
  shippingLastName  String?
  shippingEmail     String?
  shippingPhone     String?
  shippingAddress   String?
  shippingCity      String?
  shippingState     String?
  shippingZipCode   String?
  shippingCountry   String?
  
  paymentMethod     String?
  
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  color     String?

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  size      String?
  color     String?

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  userId    String
  productId String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}
